#include<stdio.h>
#include<string.h>
#include<ctype.h>
#define MX 5

void playfair(char ch1, char ch2, char key[MX][MX]) {
    int i, j, w = -1, x = -1, y = -1, z = -1;
    
    
    for(i = 0; i < MX; i++) {
        for(j = 0; j < MX; j++) {
            if(ch1 == key[i][j]) {
                w = i;
                x = j;
            }
            if(ch2 == key[i][j]) {
                y = i;
                z = j;
            }
        }
    }
    
    
    if(w != -1 && x != -1 && y != -1 && z != -1) {
        if(w == y) { // Same row
            x = (x + 1) % MX;
            z = (z + 1) % MX;
            printf("%c%c", key[w][x], key[y][z]);
        }
        else if(x == z) { // Same column
            w = (w + 1) % MX;
            y = (y + 1) % MX;
            printf("%c%c", key[w][x], key[y][z]);
        }
        else { // Rectangle case
            printf("%c%c", key[w][z], key[y][x]);
        }
    }
}

int main() {
    int i, j, k = 0, m = 0, n;
    char key[MX][MX], keyminus[25], keystr[10], str[25] = {0};
    char alpa[26] = {
        'A','B','C','D','E','F','G','H','I','K','L','M',
        'N','O','P','Q','R','S','T','U','V','W','X','Y','Z'
    }; // Removed 'J' as we use 'I' instead
    
    printf("\nEnter key: ");
    scanf("%s", keystr);
    getchar(); // Consume newline
    
    printf("\nEnter the plain text: ");
    scanf("%s", str);
    
    n = strlen(keystr);
    
    // Convert the characters to uppercase and handle J->I
    for(i = 0; i < n; i++) {
        if(keystr[i] == 'j' || keystr[i] == 'J') 
            keystr[i] = 'I';
        else
            keystr[i] = toupper(keystr[i]);
    }
    
    // Convert all the characters of plaintext to uppercase and handle J->I
    for(i = 0; i < strlen(str); i++) {
        if(str[i] == 'j' || str[i] == 'J') 
            str[i] = 'I';
        else
            str[i] = toupper(str[i]);
    }
    
    // Create keyminus (remaining letters after removing key letters)
    int keyminus_index = 0;
    for(i = 0; i < 25; i++) { // 25 letters (A-Z without J)
        int found = 0;
        for(k = 0; k < n; k++) {
            if(keystr[k] == alpa[i]) {
                found = 1;
                break;
            }
        }
        if(!found) {
            keyminus[keyminus_index] = alpa[i];
            keyminus_index++;
        }
    }
    
    // Construct key matrix
    k = 0;
    m = 0;
    printf("\nKey Matrix:\n");
    for(i = 0; i < MX; i++) {
        for(j = 0; j < MX; j++) {
            if(k < n) {
                // Check for duplicates in key matrix
                int duplicate = 0;
                for(int a = 0; a < i; a++) {
                    for(int b = 0; b < MX; b++) {
                        if(key[a][b] == keystr[k]) {
                            duplicate = 1;
                            break;
                        }
                    }
                }
                for(int b = 0; b < j; b++) {
                    if(key[i][b] == keystr[k]) {
                        duplicate = 1;
                        break;
                    }
                }
                
                if(!duplicate) {
                    key[i][j] = keystr[k];
                    k++;
                } else {
                    k++;
                    j--; // Try next position
                    continue;
                }
            }
            else {
                key[i][j] = keyminus[m];
                m++;
            }
            printf("%c ", key[i][j]);
        }
        printf("\n");
    }
    
    printf("\nEntered text: %s\n", str);
    printf("Cipher Text: ");
    
    // Process the plaintext in pairs
    i = 0;
    while(i < strlen(str)) {
        if(i == strlen(str) - 1) { // Last character
            playfair(str[i], 'X', key);
            i++;
        }
        else if(str[i] == str[i+1]) { // Same letters
            playfair(str[i], 'X', key);
            i++; // Only move one position forward
        }
        else {
            playfair(str[i], str[i+1], key);
            i += 2; // Move two positions forward
        }
    }
    
    printf("\n");
    return 0;
}
