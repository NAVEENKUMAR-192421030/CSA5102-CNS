#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

// Function prototypes
void caesarCipher(char *text, int shift, int encrypt);
void vigenereCipher(char *text, char *key, int encrypt);
void reverseCipher(char *text);
void atbashCipher(char *text);
void rot13Cipher(char *text);
void displayMenu();
void printSeparator();

int main() {
    char text[1000];
    char key[100];
    int choice, method, shift;
    
    printf("=== General Cipher Program ===\n");
    
    while(1) {
        displayMenu();
        printf("\nEnter your choice (1-7): ");
        scanf("%d", &choice);
        getchar(); // Clear newline from buffer
        
        if(choice == 7) {
            printf("Goodbye!\n");
            break;
        }
        
        if(choice < 1 || choice > 7) {
            printf("Invalid choice! Please try again.\n");
            continue;
        }
        
        printf("Enter your text: ");
        fgets(text, sizeof(text), stdin);
        text[strcspn(text, "\n")] = 0; // Remove newline
        
        switch(choice) {
            case 1: // Caesar Cipher
                printf("Enter shift value: ");
                scanf("%d", &shift);
                getchar();
                printf("Encrypt (1) or Decrypt (0): ");
                scanf("%d", &method);
                getchar();
                caesarCipher(text, shift, method);
                printf("Result: %s\n", text);
                break;
                
            case 2: // Vigenere Cipher
                printf("Enter key: ");
                fgets(key, sizeof(key), stdin);
                key[strcspn(key, "\n")] = 0;
                printf("Encrypt (1) or Decrypt (0): ");
                scanf("%d", &method);
                getchar();
                vigenereCipher(text, key, method);
                printf("Result: %s\n", text);
                break;
                
            case 3: // Reverse Cipher
                reverseCipher(text);
                printf("Result: %s\n", text);
                break;
                
            case 4: // Atbash Cipher
                atbashCipher(text);
                printf("Result: %s\n", text);
                break;
                
            case 5: // ROT13 Cipher
                rot13Cipher(text);
                printf("Result: %s\n", text);
                break;
                
            case 6: // Multiple Ciphers
                printf("Applying multiple ciphers (Caesar + Reverse + Atbash):\n");
                // Make a copy to preserve original
                char original[1000];
                strcpy(original, text);
                
                caesarCipher(text, 3, 1); // Caesar encrypt with shift 3
                printf("After Caesar: %s\n", text);
                reverseCipher(text);      // Reverse
                printf("After Reverse: %s\n", text);
                atbashCipher(text);       // Atbash
                printf("Final Result: %s\n", text);
                
                // Show decryption process
                printf("\nDecryption process:\n");
                strcpy(text, original);
                atbashCipher(text);       // Reverse Atbash
                reverseCipher(text);      // Reverse the reverse
                caesarCipher(text, 3, 0); // Caesar decrypt
                printf("Decrypted back: %s\n", text);
                break;
        }
        
        printSeparator();
    }
    
    return 0;
}

void displayMenu() {
    printf("\nAvailable Cipher Methods:\n");
    printf("1. Caesar Cipher\n");
    printf("2. Vigenere Cipher\n");
    printf("3. Reverse Cipher\n");
    printf("4. Atbash Cipher\n");
    printf("5. ROT13 Cipher\n");
    printf("6. Multiple Ciphers (Combination)\n");
    printf("7. Exit\n");
}

void printSeparator() {
    printf("\n==================================================\n");
}

// Caesar Cipher implementation
void caesarCipher(char *text, int shift, int encrypt) {
    if (!encrypt) {
        shift = -shift; // Reverse shift for decryption
    }
    
    for(int i = 0; text[i] != '\0'; i++) {
        if(isalpha(text[i])) {
            char base = isupper(text[i]) ? 'A' : 'a';
            text[i] = (text[i] - base + shift) % 26;
            if(text[i] < 0) text[i] += 26; // Handle negative values
            text[i] += base;
        }
    }
}

// Vigenere Cipher implementation
void vigenereCipher(char *text, char *key, int encrypt) {
    int keyLen = strlen(key);
    int keyIndex = 0;
    
    for(int i = 0; text[i] != '\0'; i++) {
        if(isalpha(text[i])) {
            char base = isupper(text[i]) ? 'A' : 'a';
            char keyBase = isupper(key[keyIndex]) ? 'A' : 'a';
            int shift = key[keyIndex] - keyBase;
            
            if(!encrypt) {
                shift = -shift; // Reverse shift for decryption
            }
            
            text[i] = (text[i] - base + shift) % 26;
            if(text[i] < 0) text[i] += 26;
            text[i] += base;
            
            keyIndex = (keyIndex + 1) % keyLen;
        }
    }
}

// Reverse Cipher implementation
void reverseCipher(char *text) {
    int len = strlen(text);
    for(int i = 0; i < len / 2; i++) {
        char temp = text[i];
        text[i] = text[len - i - 1];
        text[len - i - 1] = temp;
    }
}

// Atbash Cipher implementation
void atbashCipher(char *text) {
    for(int i = 0; text[i] != '\0'; i++) {
        if(isupper(text[i])) {
            text[i] = 'Z' - (text[i] - 'A');
        } else if(islower(text[i])) {
            text[i] = 'z' - (text[i] - 'a');
        }
    }
}

// ROT13 Cipher implementation
void rot13Cipher(char *text) {
    caesarCipher(text, 13, 1); // ROT13 is Caesar with shift 13
}
