#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 2

void prepareText(char *text) {
    int len = strlen(text);
    int j = 0;
    char temp[100];
    
    for (int i = 0; i < len; i++) {
        if (isalpha(text[i])) {
            temp[j++] = toupper(text[i]);
        }
    }
    temp[j] = '\0';
    
    
    if (j % SIZE != 0) {
        temp[j++] = 'X';
    }
    temp[j] = '\0';
    
    strcpy(text, temp);
}

int charToNum(char c) {
    return c - 'A';
}

char numToChar(int n) {
    return (n % 26) + 'A';
}

void hillEncrypt(char *plaintext, int key[SIZE][SIZE], char *ciphertext) {
    int len = strlen(plaintext);
    int vector[SIZE], result[SIZE];
    
    for (int i = 0; i < len; i += SIZE) {
        for (int j = 0; j < SIZE; j++) {
            vector[j] = charToNum(plaintext[i + j]);
        }
        
        for (int j = 0; j < SIZE; j++) {
            result[j] = 0;
            for (int k = 0; k < SIZE; k++) {
                result[j] += key[j][k] * vector[k];
            }
            result[j] %= 26;
        }
        
        for (int j = 0; j < SIZE; j++) {
            ciphertext[i + j] = numToChar(result[j]);
        }
    }
    ciphertext[len] = '\0';
}

void printMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%2d ", matrix[i][j]);
        }
        printf("\n");
    }
}

int main() {
    char plaintext[100];
    char ciphertext[100];
    
    // 2x2 key matrix
    int key[SIZE][SIZE] = {
        {3, 3},
        {2, 5}
    };
    
    printf("=== Hill Cipher Encryption (2x2) ===\n\n");
    printf("Key Matrix:\n");
    printMatrix(key);
    printf("\n");
    
    printf("Enter message to encrypt: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = 0;
    
    prepareText(plaintext);
    
    printf("\nPrepared text: %s\n", plaintext);
    
    hillEncrypt(plaintext, key, ciphertext);
    
    printf("\nEncrypted text: %s\n", ciphertext);
    
    // Show comparison
    printf("\nText Comparison:\n");
    printf("Original:  %s\n", plaintext);
    printf("Encrypted: %s\n", ciphertext);
    
    return 0;
}
